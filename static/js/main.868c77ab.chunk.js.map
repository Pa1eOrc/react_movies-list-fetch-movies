{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","setFoundMovie","useState","isError","setIsError","searchInputValue","setSearchInputValue","movieFromServer","setMovieFromServer","newMovie","setNewMovie","isLoading","setIsLoading","handleFormSubmit","e","a","preventDefault","query","trim","fetch","then","res","json","catch","Response","Error","useEffect","movieData","Title","Plot","Poster","imdbID","onSubmit","htmlFor","type","id","placeholder","classNames","value","onChange","target","onClick","disabled","App","setMovies","foundMovie","every","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.868c77ab.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\n\nimport React, { useEffect, useState } from 'react';\nimport './FindMovie.scss';\nimport { MovieData } from '../../types/MovieData';\nimport { getMovie } from '../../api';\nimport { ResponseError } from '../../types/ReponseError';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\n\nconst imdbLink = 'https://www.imdb.com/title';\nconst defaultImg = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n\ntype Props = {\n  setFoundMovie: (movie: Movie) => void,\n};\n\nexport const FindMovie: React.FC<Props> = ({ setFoundMovie }) => {\n  const [isError, setIsError] = useState(false);\n  const [searchInputValue, setSearchInputValue] = useState('');\n  const [movieFromServer, setMovieFromServer] = useState<\n  MovieData | ResponseError | null>(null);\n  const [newMovie, setNewMovie] = useState<Movie | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchInputValue(e.target.value);\n    setIsError(false);\n  };\n\n  const handleFormSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const movie = await getMovie(searchInputValue.trim());\n\n      if ('Response' in movie && movie.Response === 'False') {\n        setIsError(true);\n        setMovieFromServer(null);\n      } else {\n        setIsError(false);\n        setMovieFromServer(movie);\n      }\n    } catch (error) {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (movieFromServer && 'Title' in movieFromServer) {\n      const movieData: Movie = {\n        title: movieFromServer.Title,\n        description: movieFromServer.Plot,\n        imgUrl: movieFromServer.Poster && movieFromServer.Poster !== 'N/A'\n          ? movieFromServer.Poster\n          : defaultImg,\n        imdbUrl: `${imdbLink}/${movieFromServer.imdbID}`,\n        imdbId: movieFromServer.imdbID,\n      };\n\n      setNewMovie(movieData);\n    }\n  }, [movieFromServer]);\n\n  const handleMovieAdd = () => {\n    if (newMovie) {\n      setFoundMovie(newMovie);\n      setSearchInputValue('');\n      setMovieFromServer(null);\n      setNewMovie(null);\n    }\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleFormSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', { 'is-danger': isError })}\n              value={searchInputValue}\n              onChange={handleInputChange}\n            />\n          </div>\n\n          {isError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button', 'is-light', { 'is-loading': isLoading },\n              )}\n              onClick={handleFormSubmit}\n              disabled={searchInputValue === ''}\n            >\n              {!newMovie ? (\n                'Find a movie'\n              ) : (\n                'Search again'\n              )}\n            </button>\n          </div>\n\n          {newMovie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleMovieAdd}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {newMovie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={newMovie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=dbfa1d8e';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useEffect, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [foundMovie, setFoundMovie] = useState<Movie | null>(null);\n\n  useEffect(() => {\n    if (foundMovie && movies.every(\n      movie => foundMovie.imdbId !== movie.imdbId,\n    )) {\n      setMovies([...movies, foundMovie]);\n    }\n  }, [foundMovie]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          setFoundMovie={setFoundMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}